/*
 * Better Auth
 *
 * API Reference for your Better Auth Instance
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`oauth2_callback_provider_id_get`]
#[derive(Clone, Debug)]
pub struct Oauth2CallbackProviderIdGetParams {
    /// The provider ID for the OAuth provider
    pub provider_id: String
}

/// struct for passing parameters to the method [`oauth2_link_post`]
#[derive(Clone, Debug)]
pub struct Oauth2LinkPostParams {
    pub oauth2_link_post_request: models::Oauth2LinkPostRequest
}

/// struct for passing parameters to the method [`sign_in_oauth2_post`]
#[derive(Clone, Debug)]
pub struct SignInOauth2PostParams {
    pub sign_in_oauth2_post_request: models::SignInOauth2PostRequest
}


/// struct for typed errors of method [`oauth2_callback_provider_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Oauth2CallbackProviderIdGetError {
    Status400(models::SocialSignIn400Response),
    Status401(models::SocialSignIn400Response),
    Status403(models::SocialSignIn403Response),
    Status404(models::SocialSignIn403Response),
    Status429(models::SocialSignIn403Response),
    Status500(models::SocialSignIn403Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`oauth2_link_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Oauth2LinkPostError {
    Status400(models::SocialSignIn400Response),
    Status401(models::SocialSignIn400Response),
    Status403(models::SocialSignIn403Response),
    Status404(models::SocialSignIn403Response),
    Status429(models::SocialSignIn403Response),
    Status500(models::SocialSignIn403Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sign_in_oauth2_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SignInOauth2PostError {
    Status400(models::SocialSignIn400Response),
    Status401(models::SocialSignIn400Response),
    Status403(models::SocialSignIn403Response),
    Status404(models::SocialSignIn403Response),
    Status429(models::SocialSignIn403Response),
    Status500(models::SocialSignIn403Response),
    UnknownValue(serde_json::Value),
}


/// OAuth2 callback
pub async fn oauth2_callback_provider_id_get(configuration: &configuration::Configuration, params: Oauth2CallbackProviderIdGetParams) -> Result<models::Oauth2CallbackProviderIdGet200Response, Error<Oauth2CallbackProviderIdGetError>> {

    let uri_str = format!("{}/oauth2/callback/{providerId}", configuration.base_path, providerId=crate::apis::urlencode(params.provider_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Oauth2CallbackProviderIdGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Oauth2CallbackProviderIdGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Oauth2CallbackProviderIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Link an OAuth2 account to the current user session
pub async fn oauth2_link_post(configuration: &configuration::Configuration, params: Oauth2LinkPostParams) -> Result<models::Oauth2LinkPost200Response, Error<Oauth2LinkPostError>> {

    let uri_str = format!("{}/oauth2/link", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&params.oauth2_link_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Oauth2LinkPost200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Oauth2LinkPost200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<Oauth2LinkPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sign in with OAuth2
pub async fn sign_in_oauth2_post(configuration: &configuration::Configuration, params: SignInOauth2PostParams) -> Result<models::SignInOauth2Post200Response, Error<SignInOauth2PostError>> {

    let uri_str = format!("{}/sign-in/oauth2", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&params.sign_in_oauth2_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SignInOauth2Post200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SignInOauth2Post200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SignInOauth2PostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

