/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SigninImport } from './routes/signin'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as SplatImport } from './routes/$'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as PUserIdImport } from './routes/p/$userId'
import { Route as DirectSplatImport } from './routes/direct/$'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const PUserIdRoute = PUserIdImport.update({
  id: '/p/$userId',
  path: '/p/$userId',
  getParentRoute: () => rootRoute,
} as any)

const DirectSplatRoute = DirectSplatImport.update({
  id: '/direct/$',
  path: '/direct/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/direct/$': {
      id: '/direct/$'
      path: '/direct/$'
      fullPath: '/direct/$'
      preLoaderRoute: typeof DirectSplatImport
      parentRoute: typeof rootRoute
    }
    '/p/$userId': {
      id: '/p/$userId'
      path: '/p/$userId'
      fullPath: '/p/$userId'
      preLoaderRoute: typeof PUserIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/dashboard'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/p/$userId'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/p/$userId'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/dashboard'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/p/$userId'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  SigninRoute: typeof SigninRoute
  TermsRoute: typeof TermsRoute
  DirectSplatRoute: typeof DirectSplatRoute
  PUserIdRoute: typeof PUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  DashboardRoute: DashboardRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SigninRoute: SigninRoute,
  TermsRoute: TermsRoute,
  DirectSplatRoute: DirectSplatRoute,
  PUserIdRoute: PUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/dashboard",
        "/privacy",
        "/signin",
        "/terms",
        "/direct/$",
        "/p/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/"
      ]
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/direct/$": {
      "filePath": "direct/$.tsx"
    },
    "/p/$userId": {
      "filePath": "p/$userId.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
