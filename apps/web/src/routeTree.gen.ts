/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/solid-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as DanRouteImport } from './routes/dan'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as PUserIdRouteImport } from './routes/p/$userId'
import { Route as HUserIdRouteImport } from './routes/h/$userId'
import { Route as DirectSplatRouteImport } from './routes/direct/$'
import { ServerRoute as IapiOgServerRouteImport } from './routes/iapi/og'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DanRoute = DanRouteImport.update({
  id: '/dan',
  path: '/dan',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const PUserIdRoute = PUserIdRouteImport.update({
  id: '/p/$userId',
  path: '/p/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const HUserIdRoute = HUserIdRouteImport.update({
  id: '/h/$userId',
  path: '/h/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const DirectSplatRoute = DirectSplatRouteImport.update({
  id: '/direct/$',
  path: '/direct/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IapiOgServerRoute = IapiOgServerRouteImport.update({
  id: '/iapi/og',
  path: '/iapi/og',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/dan': typeof DanRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/h/$userId': typeof HUserIdRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/dan': typeof DanRoute
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/h/$userId': typeof HUserIdRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/dan': typeof DanRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/signin': typeof SigninRoute
  '/terms': typeof TermsRoute
  '/direct/$': typeof DirectSplatRoute
  '/h/$userId': typeof HUserIdRoute
  '/p/$userId': typeof PUserIdRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/dan'
    | '/dashboard'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/h/$userId'
    | '/p/$userId'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/dan'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/h/$userId'
    | '/p/$userId'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/dan'
    | '/dashboard'
    | '/privacy'
    | '/signin'
    | '/terms'
    | '/direct/$'
    | '/h/$userId'
    | '/p/$userId'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  DanRoute: typeof DanRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  SigninRoute: typeof SigninRoute
  TermsRoute: typeof TermsRoute
  DirectSplatRoute: typeof DirectSplatRoute
  HUserIdRoute: typeof HUserIdRoute
  PUserIdRoute: typeof PUserIdRoute
}
export interface FileServerRoutesByFullPath {
  '/iapi/og': typeof IapiOgServerRoute
}
export interface FileServerRoutesByTo {
  '/iapi/og': typeof IapiOgServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/iapi/og': typeof IapiOgServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/iapi/og'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/iapi/og'
  id: '__root__' | '/iapi/og'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  IapiOgServerRoute: typeof IapiOgServerRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dan': {
      id: '/dan'
      path: '/dan'
      fullPath: '/dan'
      preLoaderRoute: typeof DanRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/p/$userId': {
      id: '/p/$userId'
      path: '/p/$userId'
      fullPath: '/p/$userId'
      preLoaderRoute: typeof PUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/h/$userId': {
      id: '/h/$userId'
      path: '/h/$userId'
      fullPath: '/h/$userId'
      preLoaderRoute: typeof HUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/direct/$': {
      id: '/direct/$'
      path: '/direct/$'
      fullPath: '/direct/$'
      preLoaderRoute: typeof DirectSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/solid-start/server' {
  interface ServerFileRoutesByPath {
    '/iapi/og': {
      id: '/iapi/og'
      path: '/iapi/og'
      fullPath: '/iapi/og'
      preLoaderRoute: typeof IapiOgServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  DanRoute: DanRoute,
  DashboardRoute: DashboardRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  SigninRoute: SigninRoute,
  TermsRoute: TermsRoute,
  DirectSplatRoute: DirectSplatRoute,
  HUserIdRoute: HUserIdRoute,
  PUserIdRoute: PUserIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  IapiOgServerRoute: IapiOgServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
